{"version":3,"sources":["pages/HomePage.js","components/SideNav.js","App.js","serviceWorker.js","index.js"],"names":["userStyles","makeStyles","theme","content","height","nameHover","color","transition","fontSize","jobHover","HomePage","classes","Grid","container","direction","justify","alignItems","className","item","xs","Typography","style","variant","Box","fontFamily","display","useStyles","topIcon","top","textAlign","marginTop","icons","marginLeft","socialIcons","root","flexGrow","backgroundColor","TabPanel","props","children","value","index","other","component","role","hidden","id","aria-labelledby","p","a11yProps","SideNav","React","useState","setValue","StyledTabs","textColor","indicatorColor","orientation","onChange","event","newValue","aria-label","tabs","StyledTab","tab","icon","Home","label","AccountBoxRounded","Work","ContactMail","withStyles","borderRight","palette","divider","indicator","Tabs","fontWeight","typography","fontWeightMedium","selected","Tab","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.55fc8346.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Grid, Typography, Box } from \"@material-ui/core\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\n\r\nconst userStyles = makeStyles(theme => ({\r\n  content: {\r\n    height: \"90vh\"\r\n  },\r\n  nameHover: {\r\n    color: \"#262037\",\r\n    transition: \"0.3s\",\r\n    \"&:hover\": {\r\n      fontSize: \"7rem\",\r\n      transition: \"0.3s\",\r\n      color: \"#5E2BED\"\r\n    }\r\n  },\r\n  jobHover: {\r\n    color: \"#043960\",\r\n    transition: \"0.3s\",\r\n    \"&:hover\": {\r\n      fontSize: \"7rem\",\r\n      transition: \"0.3s\",\r\n      color: \"#03a9f4\"\r\n    }\r\n  }\r\n}));\r\nexport default function HomePage() {\r\n  const classes = userStyles();\r\n  return (\r\n    <Grid\r\n      container\r\n      direction=\"row\"\r\n      justify=\"flex-start\"\r\n      alignItems=\"center\"\r\n      className={classes.content}\r\n    >\r\n      <Grid item xs={12}>\r\n        <Typography style={{ color: \"#ffffff\" }} variant=\"h1\">\r\n          <Box fontFamily=\"Ramabhadra, sans-serif\" display=\"inline\">\r\n            Hi, I'm{\" \"}\r\n          </Box>\r\n          <Box\r\n            fontFamily=\"Ramabhadra, sans-serif\"\r\n            display=\"inline\"\r\n            className={classes.nameHover}\r\n          >\r\n            Vuottek.\r\n          </Box>\r\n          <Box className={classes.jobHover} fontFamily=\"Ramabhadra, sans-serif\">\r\n            Full-Stack Web Developer\r\n          </Box>\r\n        </Typography>\r\n        <Typography style={{ color: \"#9B9B9B\" }} variant=\"subtitle1\">\r\n          <Box fontSize=\"1.5rem\" fontFamily=\"Montserrat\">\r\n            A Computer Science and Physics Enthusiast.\r\n          </Box>\r\n        </Typography>\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { withStyles, makeStyles } from \"@material-ui/core/styles\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Tabs, Tab, Typography, Box } from \"@material-ui/core\";\r\nimport {\r\n  ContactMail,\r\n  Home,\r\n  AccountBoxRounded,\r\n  Work,\r\n  LinkedIn,\r\n  GitHub,\r\n  Instagram,\r\n  Facebook,\r\n  Twitter\r\n} from \"@material-ui/icons\";\r\nimport HomePage from \"../pages/HomePage\";\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  topIcon: {\r\n    top: \"0px\",\r\n    color: \"#505050\",\r\n    textAlign: \"center\",\r\n    marginTop: \"0.5em\"\r\n  },\r\n  icons: {\r\n    color: \"#505050\",\r\n    marginTop: \"0.5em\",\r\n    marginLeft: \"0.45em\"\r\n  },\r\n  socialIcons: {\r\n    color: \"#505050\",\r\n    marginLeft: \"0.45em\"\r\n  },\r\n  root: {\r\n    flexGrow: 1,\r\n    backgroundColor: \"#000\",\r\n    display: \"flex\",\r\n    height: \"100vh\"\r\n  }\r\n}));\r\n\r\nfunction TabPanel(props) {\r\n  const { children, value, index, ...other } = props;\r\n  return (\r\n    <Typography\r\n      component=\"div\"\r\n      role=\"tabpanel\"\r\n      hidden={value !== index}\r\n      id={`vertical-tabpanel-${index}`}\r\n      aria-labelledby={`vertical-tab-${index}`}\r\n      {...other}\r\n    >\r\n      {value === index && <Box p={3}>{children}</Box>}\r\n    </Typography>\r\n  );\r\n}\r\n\r\nTabPanel.propTypes = {\r\n  children: PropTypes.node,\r\n  index: PropTypes.any.isRequired,\r\n  value: PropTypes.any.isRequired\r\n};\r\n\r\nfunction a11yProps(index) {\r\n  return {\r\n    id: `vertical-tab-${index}`,\r\n    \"aria-controls\": `vertical-tabpanel-${index}`\r\n  };\r\n}\r\n\r\nexport default function SideNav() {\r\n  const classes = useStyles();\r\n  const [value, setValue] = React.useState(0);\r\n\r\n  const handleChange = (event, newValue) => {\r\n    setValue(newValue);\r\n  };\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <StyledTabs\r\n        textColor=\"secondary\"\r\n        indicatorColor=\"secondary\"\r\n        orientation=\"vertical\"\r\n        variant=\"standard\"\r\n        value={value}\r\n        onChange={handleChange}\r\n        aria-label=\"side nav\"\r\n        className={classes.tabs}\r\n      >\r\n        <StyledTab\r\n          classes={{ root: classes.tab }}\r\n          icon={<Home />}\r\n          label=\"Home\"\r\n          {...a11yProps(0)}\r\n        />\r\n        <StyledTab\r\n          icon={<AccountBoxRounded />}\r\n          label=\"About me\"\r\n          {...a11yProps(1)}\r\n        />\r\n        <StyledTab icon={<Work />} {...a11yProps(2)} label=\"Projects\" />\r\n        <StyledTab icon={<ContactMail />} {...a11yProps(3)} label=\"Contact\" />\r\n      </StyledTabs>\r\n      <TabPanel value={value} index={0}>\r\n        <HomePage />\r\n      </TabPanel>\r\n      <TabPanel value={value} index={1}>\r\n        Item Two\r\n      </TabPanel>\r\n      <TabPanel value={value} index={2}>\r\n        Item Three\r\n      </TabPanel>\r\n      <TabPanel value={value} index={3}>\r\n        Item Four\r\n      </TabPanel>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst StyledTabs = withStyles(theme => ({\r\n  root: {\r\n    borderRight: `1px solid ${theme.palette.divider}`,\r\n    backgroundColor: \"#1c1c1c\"\r\n  },\r\n  indicator: {\r\n    backgroundColor: \"#5E2BED\"\r\n  }\r\n}))(Tabs);\r\n\r\nconst StyledTab = withStyles(theme => ({\r\n  root: {\r\n    color: \"#505050\",\r\n    \"&:hover\": {\r\n      color: \"#fff\",\r\n      backgroundColor: \"#424242\"\r\n    },\r\n    \"&$selected\": {\r\n      color: \"#fff\",\r\n      fontWeight: theme.typography.fontWeightMedium\r\n    }\r\n  },\r\n  selected: {}\r\n}))(Tab);\r\n","import React from \"react\";\r\nimport SideNav from \"./components/SideNav\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div>\r\n      <SideNav />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}